/*
 * no_server_chat_tool.pseudocode
 * Created on: 2024/10/22
 * Copyright: (c) R6AX-ZOE (zvzVMWWWin10@hotmail.com)
 * This file is licensed under the GNU Lesser General 
 *     Public License v3.0 (GPL-3.0).
 * Pseudocode for user-targeted activities
 */

using ui, file, sql, encrypt, datetime, plugins;

import chat_services # no_server_chat_tool_service.pseudocode

typedef Data byte[];

namespace encrypt:
    typedef public_key, private_key data;
    func random_key() -> private_key;
    func get_public(const private_key &key) -> public_key;
    func encrypt(const publigc_key &key, const Data &data) -> Data;
    func decrypt(const private_key &key, const Data &data) -> Data;

    ADT encrypter_group:
        static int key_count = 256;
        hash public_key_hash;
        bool is_public;
        (public_key | private_key) keys[]; 
        create_random(); # Constructor
        (is_public == true:) get_public();
    typedef public_eg, private_eg encrypter_group;

namespace internet:
    enum signal;
    func listen(const signal &s, Data *data, const string &aii = "any", 
        const int &max_wait_seconds = 60, delegrate event_handler);
        # `aii` is short for Anomyous Internet Identifier
    func broadcast(const signal &s, const Data &data);
    func send(const signal &s, const string &iad, const Data &data);

    async func handshake(const string &aii, const encrypt::public_key &public_keys) 
        -> encrypt::public_key: # 3.0.1 API
        # A <================> B
        # B.key:header_key=>
        #   <=header_key:msg_key
        receiver_aii = aii;
        private_header_key = encrypt::random_key();
        public_header_key = encrypt::get_public(private_header_key);
        index = public_keys.random_index();
        encrypted_encrypter = encrypt::encrypt(public_keys[index], private_header_key);
        internet::send(GET_TRANSMISSION_KEY, aii = receiver_aii,
                {id_hash: (hash)account_data.info.id, eg_hash: public_keys.public_key_hash, 
                index: index, d: encrypted_encrypter});
        transmission_key = null;
        recognizer = null; # A piece of data to recognize the encryption
                           #  key used.
        return await internet::listen(SEND_TRANSMISSION_KEY, &info, source = receiver_aii):        
            # Decrypt the key
            private_eg_data = account_data.owned_private_eg(info.eg_hash)
            if not private_eg_data:
                internet::send(KEY_PACKAGE_FAILURE, aii = receiver_aii, null);
                throw DECRYPTION_ERROR;
            
            msg_key = null;
            try:
                msg_key = encrypt::decrypt(private_eg_data.keys[info.index], info.encrypted_key);
            catch DECRYPTION_ERROR:
                internet::send(DECRYPTION_FAILURE, aii = receiver_aii, null);
                throw DECRYPTION_ERROR;
            
            return msg_key;

namespace gui:
    class login, create_user, chat_window, friend_invitation : ui::UI;
    func enter_account(account_data) -> chat_window;

namespace file_io:
    func read_account_data(const string &id, const string &password)\
        -> account_data | PASSWORD_ERROR | FILE_IO_ERROR;

    func new_account_data(const string &id, const string &password)\
        -> account_data | FILE_IO_ERROR;

    table account_table;

namespace configurations:
    struct Account_Configurations:
        int user_comms_cache_size = 256 # Metabytes
        personal_static_key_sum = 256;
        personal_encryption_group_sum = 1;
        limited_internet_access = 0

namespace core:
    ADT Account:
        string name, id, data_dir;
        encrypt::public_eg[] groups;

        func owned_public_eg(hash h) -> public_eg | null
    
    ADT Friend : Account:
        func get(const Account_Data &account, const string friend_id &id);
            # Constructor

    struct Account_Data_In_File:
        string name, id, data_dir;
        Account[] friends; # Stores id of friends.
        data[] 
        encrypt::private_eg[] groups;
        Account_Configurations config;

    ADT Account_Data:
        Account_Data_In_File info;
        map<string /*id of friends*/, string /*aii address | null*/>
            friends_online;
        
        func owned_private_eg(hash h) -> private_eg | null
    enum Login_Type login_type;

    # 1. Account operations

    func get_account(info);

    func create_account(const string &name, 
        const string &password):
        stored_id = name + (string)device.mac_address +
            (string)datetime.date();
        stored_dir = (string)(hex)(hash)stored_id;

        stored_friends = [];
        encryption_eg = encrypt::encrypter_group();;
        account = get_account(Array(name, stored_id, stored_dir, 
            stored_friends, stored_groups, encryption_eg));
        
        account_data = file_io::new_account_data(
            stored_id, password);
        
        sql_opr(file_io::account_table as table):
            INSERT (account..., account_data) INTO table;
        file_io::account_table.save();
        # login_local_account(stored_id, stored_password);
        return account;

    func login_local_account(const string &name, 
        const string &password):
        possible_accounts = sql_opr(file_io::account_table as table):
            SELECT * FROM table WHERE id LIKE "${name}%";
        if possible_accounts.isEmpty():
            throw FILE_IO_ERROR;
        foreach account in possible_accounts:
            try:
                account_data = file_io::read_account_data(account.id, 
                    password);
                login_type = LOGIN_TYPE_LOCAL;
                check_friends_online();
                return gui::enter_account(account_data);
            catch PASSWORD_ERROR:
                continue;
        throw PASSWORD_ERROR;
    
    func check_friends_online():
        foreach friend in account.friend_account:
            internet::broadcast(CHECK_FRIENDS_ONLINE, (hash)friend.id);
            account_data.friends_online[friend_account[pos].id] = info.aii;
        await internet::listen(RESPONSE_FOR_ONLINE, &info):
            if info.id_hash in (hash_list)friend_account, pos as position:
                account_data.friends_online[friend_account[pos].id] = info.aii;
        return;

    func login_as_second_device(const string &name, 
        const string &password):
        attempts = 0;
        while attemps < MAX_LOGIN_ATTEMPS:
            attempts += 1;
            private_key = encrypt::random_key();
            public_key = encrypt::get_public(private_key);
            internet::broadcast(SECOND_DEVICE_LOGIN_REQUEST, 
                (hash)name + (hash)password + public_key);
            try:
                internet::listen(SECOND_DEVICE_LOGIN_RESPONSE, &info):
                    if (hash)info.name == name:
                        try:
                            account_info = encrypt.decrypt(private_key, 
                                info.account_info)
                            login_type = LOGIN_TYPE_SECOND_DEVICE;
                            changes_pool = pool;
                            gui::enter_account(account_info);
                            return;
                        catch DECRYPTION_ERROR:;
                    else:
                        hang_on();
            catch TIMEOUT_ERROR: break;
        throw TIMEOUT_ERROR;
    
    func exit_account():
        switch login_type:
            case LOGIN_TYPE_LOCAL:
                account_data.save();
                release_exit_signal();
                exit(0);
            case3 LOGIN_TYPE_SECOND_DEVICE:
                release_exit_signal();
                changes_pool.upload();
                remove_local_cache();
                exit(0);

    # 2. Friend add

    func add_friend_structure(const Account &friend_account):
        account_data.friends.push_back(friend_account);

    func make_friend_invitation_code():
        key = encrypt::random_key();
        code = (hex)encrypt::get_public(key);
        gui::friend_invitation.set_code(code);
        internet::listen(FRIEND_INVITATION_CODE_REQUEST, &info,
            wait_until_true = &gui::friend_invitation.user_terminated):
            if info.code == code:
                received_data = encrypt::decrypt(key, info.data);
                internet::send(FRIEND_INVITATION_PASSED, aii = received_data.aii, 
                    account);
                gui::friend_invitation.display_account_connection;
                if await internet::listen(FRIEND_INVITATION_PASSED_OK, 
                    source = received_data.aii)
                    add_friend_structure(received_data.account);
            hang_on();
        return code;
    
    func input_friend_invitation_code():
        code = (hex2byte)gui::friend_invitation.get_code();
        data = encrypt.encrypt({account: account, aii: device.aii_address;})
        internet::broadcast(FRIEND_INVITATION_CODE_REQUEST, {code: code, data: data});
        result = internet::listen(FRIEND_INVITATION_PASSED, &info, 
            wait_until_true = (info and info.code == code) or 
                &gui::friend_invitation.user_terminated);
        if (result):
            # Friend invitation passed
            gui::friend_invitation.user_terminated = false;
            gui::friend_invitation.show_friend_invitation_passed();
            if (gui::friend_invitation.user_submit()):
                internet::send(FRIEND_INVITATION_PASSED_OK, aii = info[0], null);
                add_friend_structure(info.account);
        else:
            # Friend invitation failed
            gui::friend_invitation.show_friend_invitation_failed();

    # 3. Data transmission

    # 3.0 Mechanic descriptions for data encryption during transfer
    # Well, I think I need some description on how the algorithm worked.
    # By the code upside, we've already known that the mechanics figure out whether 
    #  your contacts are online. If he or she is online, then a dynamic encryption
    #  key will be generated for each slice of data (3.0.1); elsewise, it uses a random
    #  encryption key of the user's. It calls for random online users to store
    #  this data, accompanied with its serial number. The serial include hash of 
    #  sender, receiver and time. By the time they received these data, they will
    #  store it immediately if they have spare space allocated. By the way, I will
    #  have to control the ratio of stored information space to provided space.

    func send_data_to_aii(const string &aii, const Data[] &data):
        transmission_key = internet::handshake(friend_aii, friend);
        encrypted_data = encrypt::encrypt(transmission_key, data);
        internet::send(DATA_SEND, aii = friend_aii, {count: count, 
            serial: serial, data: encrypted_data, hash: (hash)encrypted_data});
        internet::listen(DATA_RECEIVED, &info, source = friend_aii):
            if info.state == Error:
                internet::send(DATA_SEND, aii = friend_aii, {count: count, 
                    serial: serial, data: encrypted_data, 
                    hash: (hash)encrypted_data});
                hang_on();
            # else if info.state == Success:
            #   pass;

    func send_data_to_friend(const string &friend_id, const Data &data, package_id = 0):
        if not account_data.friends_online.has_key(friend_id):
            throw INPUT_ERROR;
        
        data_serial = (hash)(account_data.info.id, friend_id, datetime.datetime());
        # If the friend is online, send the data directly
        friend_aii = account_data[friend_id]
        if friend_aii != null:
            send_data_to_aii(friend_aii, {data: data, type = MESSAGE_DATA})
        else:
            # Encrypt the data with the friend's key
            friend_account = account_data.info.friends[account_data.info.friends.find(friend_id)];
            friend_eg = friend_account.groups[friend_account.groups.random_index()];
            index = friend_eg.random_index;
            if package_id == 0:
                package_id = (hash)(datetime.datetime() + friend_id + random.random()*32);
            data_package = {eg_hash: (hash)friend_eg, ek_index: index,
                data: encrypt::encrypt(friend_eg[index], data), package_id: package_id};
            internet::broadcast(TEMP_MSG_STORAGE, {data: data_package, dst = (hash)friend_id});
            storage_count = 50;
            internet::listen(TEMP_MSG_STORAGE_RESPONSE, &info):
                if info.stored == true:
                    storage_count -= 1;
                if not storage_count <= 0:
                    hang_on();

    func send_text_to_friend(const string &friend_id, const Data &data):
        if not account_data.friends_online.has_key(friend_id):
            throw INPUT_ERROR;
        
        doc_id = (hash)(datetime.datetime() + friend_id + random.random()*32);
        head_size_max = 4KB;
        data_slices = data.slice((data.size < 256KB): 32KB - head_size_max || (data.size < 4MB): 
                    256KB - head_size_max || (data.size < 512MB): 1MB - head_size_max || 16MB - 
                    head_size_max);
        data_ids = opr_vector(data_slices.length, delegrate: (hash)(datetime.datetime() + friend_id + 
                    random.random()*32));
        head = (doc_id + data_ids.combine_as_bytes()).strech_to(head_size_max);
        for data in data_slices: data = head + data;

    # 4. User accessed scripts and plugin support
    # This section contains basic functions of chatting. Each is a independent script, verified by
    #  services.
namespace plugin_framework:
    virtual ADT Plugin_GUI_Instance:
        ui::UI tab_content;
        string intro;
        string title;
    ADT plugin:
        struct plugin_restrictions:
            int max_threads;
            int max_gui_instances;
            int internet_access;
            Account_Data virtual_account_data # The account data can be modified to protect the main
                                              # information out of touch, and each plugin has only
                                              # access limited information of its functions.
            int administration; # 0: No admin privilege;
                                # 1: Virtualized admin privilege;
                                # 2: Admin.
        static get_data_access(const plugin_restrictions &restrictions)
        plugin_restrictions restrictions;
        Data data_Access;
        script plugin;

func on_start:
    login();
    ext = "exe" | "app" | "run" | ...;
    start "./services.${ext}";
    queue = get_msg_queue("./services.${ext}");
    queue.msgsnd(USER_LOGIN, account_data);
    chat_window.init();
    chat_window.show();
